import { NextApiRequest, NextApiResponse } from 'next';
import prisma from '../../../utils/db';
import { verifyToken } from '../../../utils/auth';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const { method } = req;

  // Verify the method is POST
  if (method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed. Use POST.' });
  }

  // Must be authenticated to report
  const token = req.headers.authorization || '';
  const verifiedUser = verifyToken(token);
  if (!verifiedUser) {
    return res.status(401).json({ error: 'Unauthorized or invalid token. Please log in!' });
  }

  const userId = verifiedUser.userId;
  const { blogPostId, commentId, reason } = req.body as {
    blogPostId?: number;
    commentId?: number;
    reason: string;
  };

  // Check that only one of blogPostId or commentId is given
  if ((blogPostId && commentId) || (!blogPostId && !commentId)) {
    return res.status(400).json({ error: 'Please provide either a blog post ID or a comment ID, not both.' });
  }

  // Add an additional explanation for the report
  if (!reason || reason.trim() === '') {
    return res.status(400).json({ error: 'Please provide an additional explanation for reporting.' });
  }

  // Try-catch block generated by ChatGPT and Copilot autofill
  try {
    // Make a report for a blog post
    if (blogPostId) {
      const report = await prisma.report.create({
        data: {
          reason, // The reason for the report
          userId, // The user submitting the report
          blogPostId, // The blog post being reported
        },
      });
      return res.status(201).json({ message: 'Report for blog post submitted successfully!', report });
    }

    // Make a report for a comment
    if (commentId) {
      const report = await prisma.report.create({
        data: {
          reason, // The reason for the report
          userId, // The user submitting the report
          commentId, // The comment being reported
        },
      });
      return res.status(201).json({ message: 'Report for comment submitted successfully!', report });
    }
  } catch (error) {
    console.error('Error creating report:', error); // Log the error for debugging
    return res.status(500).json({ error: 'Error creating report.' });
  }
}
