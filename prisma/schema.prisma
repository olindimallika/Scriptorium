datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              Int              @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String           @unique
  password        String
  avatar          String?
  phoneNumber     String?
  role            String           @default("user")
  templates       Template[]
  blogPosts       BlogPost[]
  comments        Comment[]
  reports         Report[]
  createdAt       DateTime         @default(now())
  codeExecutions  CodeExecution[]
  ratings         Rating[]
  userPreferences UserPreferences?
}

model Template {
  id              Int              @id @default(autoincrement())
  title           String
  explanation     String
  code            String
  isFork          Boolean          @default(false)
  forkedFrom      Template?        @relation("Fork", fields: [forkedFromId], references: [id])
  forkedFromId    Int?
  forkedTemplates Template[]       @relation("Fork")
  userId          Int
  user            User             @relation(fields: [userId], references: [id])
  tags            TemplateTag[]
  blogPosts       BlogPost[]       @relation("BlogPostTemplates")
  TemplateSearch  TemplateSearch[]
}

model TemplateTag {
  id         Int      @id @default(autoincrement())
  name       String
  templateId Int
  template   Template @relation(fields: [templateId], references: [id])
}

model BlogPost {
  id           Int           @id @default(autoincrement())
  title        String
  description  String
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  tags         BlogPostTag[]
  templates    Template[]    @relation("BlogPostTemplates")
  comments     Comment[]
  reports      Report[]
  ratings      Rating[]      // Connect to Rating model for upvote/downvote tracking
  BlogSearch   BlogSearch[]
  upvoteCount  Int           @default(0) // Track the count of upvotes
  downvoteCount Int          @default(0) // Track the count of downvotes
  isHidden    Boolean        @default(false)
}

model BlogPostTag {
  id         Int      @id @default(autoincrement())
  name       String
  blogPostId Int
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id])
}

model Comment {
  id            Int       @id @default(autoincrement())
  content       String
  userId        Int
  user          User      @relation(fields: [userId], references: [id])
  blogPostId    Int?
  blogPost      BlogPost? @relation(fields: [blogPostId], references: [id])
  parentId      Int?
  parent        Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies       Comment[] @relation("CommentReplies")
  rating        Int       @default(0) // Optional: Track a combined rating if needed
  reports       Report[]
  ratings       Rating[]  // Connect to Rating model for upvote/downvote tracking
  upvoteCount   Int       @default(0) // Track the count of upvotes
  downvoteCount Int       @default(0) // Track the count of downvotes
  isHidden    Boolean        @default(false)

}

model Report {
  id         Int       @id @default(autoincrement())
  reason     String
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
  blogPostId Int?
  blogPost   BlogPost? @relation(fields: [blogPostId], references: [id])
  commentId  Int?
  comment    Comment?  @relation(fields: [commentId], references: [id])
}

model Rating {
  id         Int       @id @default(autoincrement())
  userId     Int       // User who is rating
  user       User      @relation(fields: [userId], references: [id])
  blogPostId Int?      // Connect to BlogPost if this rating is for a blog post
  blogPost   BlogPost? @relation(fields: [blogPostId], references: [id])
  commentId  Int?      // Connect to Comment if this rating is for a comment
  comment    Comment?  @relation(fields: [commentId], references: [id])
  isUpvote   Boolean   // true for upvote, false for downvote
}

model UserPreferences {
  id     Int    @id @default(autoincrement())
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id])
  theme  String @default("light")
}

model CodeExecution {
  id                   Int                    @id @default(autoincrement())
  code                 String
  language             String
  memoryLimit          Int
  userId               Int?
  user                 User?                  @relation(fields: [userId], references: [id])
  ExecutionEnvironment ExecutionEnvironment[]
}

model ExecutionEnvironment {
  id              Int           @id @default(autoincrement())
  memoryLimit     Int
  codeExecutionId Int
  codeExecution   CodeExecution @relation(fields: [codeExecutionId], references: [id])
}

model TemplateSearch {
  id         Int      @id @default(autoincrement())
  title      String
  tags       String
  content    String
  templateId Int
  template   Template @relation(fields: [templateId], references: [id])
}

model BlogSearch {
  id         Int      @id @default(autoincrement())
  title      String
  tags       String
  content    String
  blogPostId Int
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id])
}